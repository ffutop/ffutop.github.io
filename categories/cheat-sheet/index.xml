<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Cheat Sheet on Utop's Blog</title><link>https://www.ffutop.com/categories/cheat-sheet/</link><description>Recent content in Cheat Sheet on Utop's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cmn-Hans-CN</language><lastBuildDate>Fri, 01 Aug 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://www.ffutop.com/categories/cheat-sheet/index.xml" rel="self" type="application/rss+xml"/><item><title>gRPC mTLS 问题调试指南</title><link>https://www.ffutop.com/posts/2025-08-01-grpc-unload-tls/</link><pubDate>Fri, 01 Aug 2025 00:00:00 +0000</pubDate><guid>https://www.ffutop.com/posts/2025-08-01-grpc-unload-tls/</guid><description>前言 在分布式系统中，gRPC 和 mTLS（双向 TLS）是保障服务间通信安全的黄金搭档。然而，当 TLS 握手失败或行为不符合预期时，问题排查可能会变得</description></item><item><title>udev：实现持久化设备命名的机制与实践</title><link>https://www.ffutop.com/posts/2025-07-03-udev/</link><pubDate>Thu, 03 Jul 2025 00:00:00 +0000</pubDate><guid>https://www.ffutop.com/posts/2025-07-03-udev/</guid><description>在复杂的服务器环境中，我们经常会遇到一个棘手的问题：设备名称的非确定性。无论是系统启动时对存储设备的枚举，还是运行时热插拔一个 USB 设备，内核都</description></item><item><title>SSH 代理</title><link>https://www.ffutop.com/posts/2021-07-23-ssh-proxy/</link><pubDate>Fri, 23 Jul 2021 00:00:00 +0000</pubDate><guid>https://www.ffutop.com/posts/2021-07-23-ssh-proxy/</guid><description>&lt;p>通常，SSH 被用于登录远程服务器，并且可以像使用本地控制台一样，在远程服务器上执行命令。它可以为两台非互信的服务器在公网环境下建立安全加密通信。基于这样的加密连接，以及数据转发能力，SSH 也就顺理成章地能作为代理。&lt;/p></description></item><item><title>ACME 协议下的域名证书签署</title><link>https://www.ffutop.com/posts/2021-05-21-certificate-issue/</link><pubDate>Fri, 21 May 2021 00:00:00 +0000</pubDate><guid>https://www.ffutop.com/posts/2021-05-21-certificate-issue/</guid><description>&lt;h2 id="背景">背景&lt;/h2>
&lt;p>区别于私有化部署，用户对互联网上提供的在线服务，都希望能够建立在一个安全、可信赖的通信环境下。HTTPS 是用户普遍认知的一种传输安全协议，其本质是在 TCP/IP 协议栈的传输层(TCP)与应用层(HTTP)间增加 SSL/TLS 安全协议来保证通信安全。为了引入 SSL/TLS ，需要通过 CA 获取一份 SSL/TLS 证书。&lt;/p>
&lt;p>&lt;img src="//img.ffutop.com/6ca48149-0dd6-4046-8d54-de7e56b406b8.png" alt="">&lt;/p>
&lt;p>&lt;a href="https://www.cloudflare.com/zh-cn/learning/ssl/what-is-ssl/">&lt;strong>图1 HTTP vs HTTPS&lt;/strong>&lt;/a>&lt;/p>
&lt;p>本文档描述了证书选型，DNS 服务商选型，证书签署及续签流程。&lt;/p></description></item><item><title>Dubbo Telnet 调试</title><link>https://www.ffutop.com/posts/2020-06-17-dubbo-telnet/</link><pubDate>Wed, 17 Jun 2020 00:00:00 +0000</pubDate><guid>https://www.ffutop.com/posts/2020-06-17-dubbo-telnet/</guid><description>&lt;p>始于 Dubbo 2.0.6 的 Telnet Command 是一个令人兴奋的特性，极大地降低了服务化测试的成本，但是，&lt;a href="http://dubbo.apache.org/zh-cn/docs/user/references/telnet.html">寥寥数行的可怜文档&lt;/a>无形地为使用增加了成本。此前虽然一直在使用 Telnet Command，但基本上是浅尝辄止，字符集的问题、重载方法的错误筛选等，都让我不得不对这个特性敬而远之，无法作为高频的生产力工具。最近，频繁出现的调试需求让我不得不尝试接受并熟悉 Dubbo Telnet Command。&lt;/p>
&lt;p>&lt;em>本文只针对 invoke 命令，基于 Dubbo 版本 2.6.7&lt;/em>&lt;/p>
&lt;p>Dubbo Telnet Command &lt;code>invoke&lt;/code> 命令的一般格式为 &lt;code>invoke &amp;lt;全限定名&amp;gt;.&amp;lt;方法名&amp;gt;(&amp;lt;参数&amp;gt;,...,&amp;lt;参数&amp;gt;)&lt;/code>。其中参数需要能被 JSON 解析，即提取命令中的 &lt;code>&amp;lt;参数&amp;gt;,...,&amp;lt;参数&amp;gt;&lt;/code> 部分，并包装上 &lt;code>[]&lt;/code> 构成 &lt;code>[&amp;lt;参数&amp;gt;,...,&amp;lt;参数&amp;gt;]&lt;/code> ，需要保证这个串是一个合法的 JSON Array。&lt;/p>
&lt;p>本文提供的示例均可在 &lt;a href="https://github.com/ffutop/dubbo-telnet-playground">dubbo-telnet-playground&lt;/a> 中找到。&lt;/p></description></item></channel></rss>