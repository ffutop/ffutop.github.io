<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>BTrace on Utop's Blog</title><link>https://www.ffutop.com/tags/btrace/</link><description>Recent content in BTrace on Utop's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cmn-Hans-CN</language><lastBuildDate>Wed, 15 Aug 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://www.ffutop.com/tags/btrace/index.xml" rel="self" type="application/rss+xml"/><item><title>Java Instrumentation</title><link>https://www.ffutop.com/posts/2018-08-15-java-instrumentation/</link><pubDate>Wed, 15 Aug 2018 00:00:00 +0000</pubDate><guid>https://www.ffutop.com/posts/2018-08-15-java-instrumentation/</guid><description>&lt;h2 id="start">Start&lt;/h2>
&lt;p>从现有的前置知识来说，我们能够认识到两个事实:&lt;/p>
&lt;ol>
&lt;li>Java Class 通过 ClassLoader 进行加载。
通过&lt;code>全限定名&lt;/code>进行区分。当需要加载新的类时，ClassLoader 通过双亲委派机制判断是否已经加载过这个类。
换句话说: Class 一经加载，就不会尝试重复加载 (至少按绝大多数人的认知来说，确实是的)&lt;/li>
&lt;li>有没有可能让被加载的 Class 与物理存储上的 .class 内容不同。
当然也是完全可以做到的。不管怎么说，CGlib 和 Java Proxy 也是一个耳熟能详的概念吧
(虽然可能不了解细节。在此，欢迎学习前置技能 &lt;a href="https://dormouse-none.github.io/2018-07-10-CGlib-Enhancer/">CGlib Enhancer 主流程源码解析&lt;/a> 和 &lt;a href="https://dormouse-none.github.io/2018-07-20-Java-Proxy/">Java Proxy 源码解析&lt;/a>。不过不影响本文后续内容)&lt;/li>
&lt;/ol>
&lt;p>另一个方面，也许绝大多数人都听说过所谓的&lt;code>热部署&lt;/code>。但是究竟怎么才能做到 &lt;code>热部署&lt;/code>(话题开得有点大哈。Y_Y 本文不讲这个)&lt;/p>
&lt;p>操作字节码一定是一个逃不开的话题，毕竟 Class 就是所谓的被加载到内存的字节码嘛。&lt;/p>
&lt;p>如何操作字节码? ASM, CGlib, Java Proxy, Javassist ? 不过这些都要等到需要被操作的类被加载了才行啊，似乎有点晚&amp;hellip;&lt;/p>
&lt;p>Java 提供了一个可行的机制，用来在 ClassLoader 加载字节码之前完成对操作字节码的目的&lt;/p>
&lt;h2 id="instrumentation">Instrumentation&lt;/h2>
&lt;p>&lt;code>java.lang.instrument.Instrumentation&lt;/code> 类为提供直接操作 Java 字节码的又一个途径(虽然 Java Doc 的说明是用来检测 Java 代码的)&lt;/p>
&lt;p>相信我这个说明是没有问题的。毕竟完成对代码检测的途径是直接修改字节码。&lt;/p>
&lt;p>下列有两种方法可以达到目的&lt;/p>
&lt;ol>
&lt;li>当 JVM 以指示一个代理类的方式启动时，将传递给代理类的 premain 方法一个 Instrumentation 实例。&lt;/li>
&lt;li>当 JVM 提供某种机制在 JVM 启动之后某一时刻启动代理时，将传递给代理代码的 agentmain 方法一个 Instrumentation 实例。&lt;/li>
&lt;/ol>
&lt;p>话不多说，下面将全部以实例来展现对这种 JVM 检测机制(虽然例子已经脱离了&lt;em>检测&lt;/em>的目的)的使用&lt;/p></description></item></channel></rss>