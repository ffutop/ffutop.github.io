<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>HTTP on Utop's Blog</title><link>https://www.ffutop.com/tags/http/</link><description>Recent content in HTTP on Utop's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cmn-Hans-CN</language><lastBuildDate>Sat, 19 Jul 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://www.ffutop.com/tags/http/index.xml" rel="self" type="application/rss+xml"/><item><title>漫谈登录账密前端数据加密的必要性与正确实践</title><link>https://www.ffutop.com/posts/2025-07-19-login-and-encrypt/</link><pubDate>Sat, 19 Jul 2025 00:00:00 +0000</pubDate><guid>https://www.ffutop.com/posts/2025-07-19-login-and-encrypt/</guid><description>在用户登录流程中，账号和密码经由浏览器，通过网络传递给服务器。为保障此过程的安全性，强制使用 HTTPS 已是业界共识。HTTPS 借助 SSL/TLS 协议，提供了强大</description></item><item><title>TLS 加密报文解析</title><link>https://www.ffutop.com/posts/2023-03-18-tls-parse/</link><pubDate>Sat, 18 Mar 2023 00:00:00 +0000</pubDate><guid>https://www.ffutop.com/posts/2023-03-18-tls-parse/</guid><description>在使用 Wireshare 或者 tcpdump 抓包时，往往面对 SSL/TLS 加密的数据报文束手无策。由于 SSL/TLS 的安全设计，防范了通讯双方以外的第三方截取数据后成功解析的可能。但也对开发测试</description></item><item><title>劫持 Java 应用 HTTP 请求</title><link>https://www.ffutop.com/posts/2020-10-19-hijack-http-req/</link><pubDate>Mon, 19 Oct 2020 00:00:00 +0000</pubDate><guid>https://www.ffutop.com/posts/2020-10-19-hijack-http-req/</guid><description>&lt;h2 id="背景">背景&lt;/h2>
&lt;p>全链路追踪中，针对部分特殊的流量，希望将它引导到特定服务上（这个特定服务不在正常请求的链路上）——问题可以被抽象为解决进程间通信过程中目标进程的选择。&lt;/p>
&lt;p>进程间通信方式很多，本篇只关注 Java 进程间套接字通信下 HTTP 形式的请求劫持，引导特定流量到特定进程。&lt;/p></description></item><item><title>HTTP Large Header Fields Problem</title><link>https://www.ffutop.com/posts/2020-04-11-large-http-header/</link><pubDate>Sat, 11 Apr 2020 00:00:00 +0000</pubDate><guid>https://www.ffutop.com/posts/2020-04-11-large-http-header/</guid><description>&lt;p>&lt;em>首次遇到请求头过大的问题，做个记录。特别是在本次处理陷入了误区，做了太多无谓的猜测&lt;/em>&lt;/p>
&lt;p>请求头过大导致响应错误码 400 (Bad Request)、414 (URI Too Long)、431 (Request Header Fields Too Large) 的情况不多，不过原因和解决方案都是比较清晰的。客户端请求的请求头过大导致超出了服务器支持的缓冲区。如果客户端可控，控制请求头的大小；否则，适当调大服务器配置的缓冲区大小。&lt;/p>
&lt;p>最近生产上碰到了这个问题，颇费了一番功夫。接手问题时得到了几个错误的信息，干扰到了处理的全过程。甚至为此去重读了 NGINX Directive &lt;code>client_header_buffer_size&lt;/code> 和 &lt;code>large_client_header_buffers&lt;/code> 在 1.8.1 版本的实现。&lt;/p>
&lt;p>最原始的问题是：NGINX 接收到了大请求头(4.5k)的请求，最终响应了错误码 400 Bad Request 。&lt;/p>
&lt;p>真实的背景因素包括：&lt;/p>
&lt;ul>
&lt;li>请求链路 NGINX -&amp;gt; k8s nginx ingress -&amp;gt; k8s pods (Tomcat)&lt;/li>
&lt;li>NGINX &lt;code>large_client_header_buffers&lt;/code> 使用了默认配置 &lt;code>4 8k&lt;/code>。&lt;/li>
&lt;li>Tomcat maxHttpHeaderSize 使用了默认配置 (default 8192)&lt;/li>
&lt;/ul></description></item></channel></rss>