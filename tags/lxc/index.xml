<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>LXC on Utop's Blog</title><link>https://www.ffutop.com/tags/lxc/</link><description>Recent content in LXC on Utop's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cmn-Hans-CN</language><lastBuildDate>Tue, 18 Jun 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://www.ffutop.com/tags/lxc/index.xml" rel="self" type="application/rss+xml"/><item><title>理解 Linux Kernel (12) - Linux 容器化技术</title><link>https://www.ffutop.com/posts/2019-06-18-understand-kernel-12/</link><pubDate>Tue, 18 Jun 2019 00:00:00 +0000</pubDate><guid>https://www.ffutop.com/posts/2019-06-18-understand-kernel-12/</guid><description>&lt;p>由于工作上的一些调整，目前开始接触容器化技术了。容器化技术相对于虚拟机的最大区别，在于其只是在操作系统上做了资源隔离和控制，而虚拟机则会基于原有的操作系统，模拟一整套硬件设备接口，运行一个新的操作系统及相关的 Lib 库。&lt;/p>
&lt;p>&lt;img src="https://img.ffutop.com/9FD2522D-BBEB-443A-8267-26F1EC77BA87.png" alt="Containerd VS VM">&lt;/p>
&lt;p>&lt;small>&lt;center>Copied From docker.com&lt;/center>&lt;/small>&lt;/p>
&lt;p>如何实现容器化，显然需要从操作系统层面进行支撑。这其中涉及到的核心技术，就包括命名空间(namespace)和控制组(Control Group, cgroup)，前者用来对资源进行隔离，后者用来对资源加以限制。&lt;/p>
&lt;blockquote>
&lt;p>本文所有涉及的内核代码基于版本 3.10.1 ；所有命令执行结果基于 Ubuntu 18.04&lt;/p>
&lt;/blockquote></description></item></channel></rss>