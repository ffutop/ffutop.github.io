<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Raft on Utop's Blog</title><link>https://www.ffutop.com/tags/raft/</link><description>Recent content in Raft on Utop's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cmn-Hans-CN</language><lastBuildDate>Thu, 26 Mar 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://www.ffutop.com/tags/raft/index.xml" rel="self" type="application/rss+xml"/><item><title>Idempotent Pattern</title><link>https://www.ffutop.com/posts/2020-03-26-idempotent/</link><pubDate>Thu, 26 Mar 2020 00:00:00 +0000</pubDate><guid>https://www.ffutop.com/posts/2020-03-26-idempotent/</guid><description>&lt;p>&lt;a name="initProblem" />“同样是 KV-Server ，为什么基于 Raft Algorithm 的 KV-Server 需要对客户端操作实现幂等，而 Redis 却不需要？” 此前在实现基于 Raft 的容错 Key/Value Service 时，为了能够实现幂等的 &lt;code>Put(key, value)&lt;/code>、&lt;code>Append(key, arg)&lt;/code> 操作，可谓是费尽心思。但同为提供键值服务的 Redis ，怎么从来没见被要求幂等呢？&lt;/p>
&lt;p>基于这个问题，本篇将整理并总结个人的结论。&lt;/p></description></item><item><title>分布式共识·Raft Algorithm</title><link>https://www.ffutop.com/posts/2020-02-17-raft/</link><pubDate>Mon, 17 Feb 2020 00:00:00 +0000</pubDate><guid>https://www.ffutop.com/posts/2020-02-17-raft/</guid><description>&lt;h2 id="分布式系统与共识">分布式系统与共识&lt;/h2>
&lt;p>分布式系统是一组透过网络相互连接通信与传递信息的计算机，协同来完成一件任务的系统。任务可能是大规模计算，可能是冗余存储。按此分类，又有分布式计算系统和分布式存储系统。&lt;/p>
&lt;p>典型的分布式计算系统/框架有 MapReduce、Spark；分布式存储系统有 GFS 等。虽然有此划分，但分布式计算几乎必然地涉及到存储的需求。存储为计算提供支持，计算促进存储的发展。&lt;/p>
&lt;p>&lt;img src="https://img.ffutop.com/3885C079-B4ED-4B0E-AD86-60AB8D4D4792.png" alt="分布式系统分类">&lt;/p>
&lt;p>计算是无状态的，存储是有状态的。在分布式的存储下，为了让计算机各自维护的状态协商达成一致，就必然地需要共识算法的支持。Wait a minute. 计算机间的协商需要共识算法？&lt;/p>
&lt;p>计算机间的协作可以划分为中心化与去中心化两大类。中心化的方案自然是有一个权威的 Master 来协调所有的计算机的任务，但前提是这个 Master 必须可靠，即依赖一个单点就必须要对它的可用性进行担保；去中心化的方案，计算机间都是平等的，如何就一个问题达成共识，就是面对的核心问题。&lt;/p>
&lt;blockquote>
&lt;h3 id="共识与一致性">共识与一致性&lt;/h3>
&lt;p>共识(Consensus)：机器之间就一个值/命令等达成共同的认识，一般是面向输入，处理并维护这个值（状态）&lt;/p>
&lt;p>一致性(Consistency)：一致性表述为机器对外提供服务时的表现。向机器 A 或机器 B 读取同一数据，两者的返回值是相同的。当然，也有不同的弱化版本，允许一些特定条件下的不一致&lt;/p>
&lt;/blockquote>
&lt;p>在 2014 年之前，Paxos [1] 几乎是解决共识问题的唯一选择。但难懂是一个致命的问题，并且难以工程化也是重大的缺陷。Raft 的出现无疑是一道曙光，熟读，实践，豁然开朗。&lt;/p></description></item></channel></rss>