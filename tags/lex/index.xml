<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Lex on Utop's Blog</title><link>https://www.ffutop.com/tags/lex/</link><description>Recent content in Lex on Utop's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cmn-Hans-CN</language><lastBuildDate>Thu, 25 Apr 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://www.ffutop.com/tags/lex/index.xml" rel="self" type="application/rss+xml"/><item><title>Lex &amp; Yacc 学习笔记</title><link>https://www.ffutop.com/posts/2019-04-25-lex-and-yacc/</link><pubDate>Thu, 25 Apr 2019 00:00:00 +0000</pubDate><guid>https://www.ffutop.com/posts/2019-04-25-lex-and-yacc/</guid><description>&lt;p>高级语言相较于机器语言、汇编语言，更加符合人的思考习惯。换句话说，更偏向于自然语言的风格而更偏离指令化的描述。用高级语言编写的一行代码，最终可能需要处理器执行若干条指令。如何让机器意识到高级语言代码对应的机器指令是哪些呢？当然就需要一个优秀的翻译。&lt;/p>
&lt;p>无论是编译型语言还是解释型语言，总逃脱不了这样一个流程：高级语言 ➜ 目标平台的指令。所谓编译型/解释型的区别，在于其转换流程是在线的(online)还是离线的(offline)。在线的方式无法意识到后续的代码，但胜在即时反应；离线的方式可以统揽全局，进行更多的优化，但代码文本必须完整。&lt;/p>
&lt;p>高级语言 ➜ 目标平台的指令，这样的流程如何实现。一般来说，划分为四个阶段：词法分析、语法分析、语义分析、目标代码生成。&lt;/p>
&lt;p>&lt;img src="https://ws2.sinaimg.cn/large/006tNc79ly1g2b583io0ej30wq094aa5.jpg" alt="">&lt;/p>
&lt;p>本篇的主要目的，是展示“语言翻译”的几个阶段工作，以及通过 Lex &amp;amp; Yacc 工具演示一门自定义语言的“翻译”。&lt;/p></description></item></channel></rss>