<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>time interrupt on Utop's Blog</title><link>https://www.ffutop.com/tags/time-interrupt/</link><description>Recent content in time interrupt on Utop's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cmn-Hans-CN</language><lastBuildDate>Fri, 12 Oct 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://www.ffutop.com/tags/time-interrupt/index.xml" rel="self" type="application/rss+xml"/><item><title>理解 Linux Kernel (4) - 任务调度</title><link>https://www.ffutop.com/posts/2018-10-12-understand-kernel-4/</link><pubDate>Fri, 12 Oct 2018 00:00:00 +0000</pubDate><guid>https://www.ffutop.com/posts/2018-10-12-understand-kernel-4/</guid><description>&lt;p>前面几节已经描述过，对于单核 CPU 来说。CPU 就处于不断地执行指令的过程(或者通过 &lt;code>hlt&lt;/code> 指令直接停止工作)。&lt;/p>
&lt;p>针对于每一个程序来说，这个程序执行流程是通过 CPU 中几组寄存器(通用寄存器、段寄存器、控制寄存器等) 和存储在内存中的代码和数据协作完成的。&lt;/p>
&lt;p>如果要达到单核多任务的目的，首先要做的就是完成对几组寄存器中当前值的保存(我称之为保存现场)。而对于内存来说，多个任务的代码、数据同时存在内存是完全合理且可行的。毕竟相较于有限的寄存器，内存实在是太大了(相对而言)。&lt;/p></description></item></channel></rss>